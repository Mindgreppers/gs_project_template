generator client {
  provider = "prisma-client-js"
  output   = "./generated-clients/mongo"
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_TEST_URL")
}

model Post {

  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime   @default(now())
  slug     String    @unique

  title    String

  body     String
  published  Boolean    @default(false)
  comments Comment[]

  description String?

  author   User      @relation(fields: [authorId], references: [id])

  authorId String    @db.ObjectId
  categoryIDs String[]   @db.ObjectId
  categories Category[] @relation(fields: [categoryIDs], references: [id])
}
model Category {
  id    String    @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  postIDs String[] @db.ObjectId
  posts Post[] @relation(fields: [postIDs], references: [id])
}


// Comments contain a comment string and connect back to the post.

// postId must have @db.ObjectId to match up with Post's id type

model Comment {

  id      String @id @default(auto()) @map("_id") @db.ObjectId

  post    Post   @relation(fields: [postId], references: [id])

  postId  String @db.ObjectId

  comment String

}


model User {

  id    String  @id @default(auto()) @map("_id") @db.ObjectId

  email String  @unique

  name  String?

  posts Post[]
  role    Role     @default(USER)
  profile Profile?

}

model Profile {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId @unique
}

enum Role {
  USER
  ADMIN
}
